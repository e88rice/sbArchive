<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.sbarchive.mapper.user.UserMapper">

    <resultMap id="getUser" type="com.project.sbarchive.vo.user.UserVO">
        <id property="userId" column="userId"></id>
        <result property="passwd" column="passwd"></result>
        <result property="nickname" column="nickname"></result>
        <result property="email" column="email"></result>
        <result property="regDate" column="regDate"></result>
        <result property="level" column="level"></result>
        <result property="lvPoint" column="lvPoint"></result>
        <result property="regDate" column="regDate"></result>
        <result property="del" column="del"></result>
        <result property="social" column="social"></result>
        <collection property="roleSet" javaType="java.util.HashSet" ofType="int">
            <result property="role_set" column="role_set"></result>
        </collection>
    </resultMap>

    <insert id="registerUser">
        INSERT INTO user (userId, passwd, nickname, email, regDate, del, social)
        VALUES (#{userId}, #{passwd}, #{nickname}, #{email}, now(), 0, 0)
    </insert>

    <insert id="addUserRole">
        insert into user_role_set (userId, role_set)
        VALUES (#{userId}, #{role_set})
    </insert>

    <insert id="addLog">
        insert into user_pw_log (userId, passwd, modDate)
        VALUES (#{userId}, #{passwd}, now())
    </insert>

    <select id="emailCheck" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM `user` WHERE email = #{email}
    </select>

    <select id="userIdCheck" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM `user` WHERE userId = #{userId}
    </select>

    <select id="loginCheck" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM `user` WHERE userId = #{userId} AND passwd = #{passwd}
    </select>

    <select id="getUserInfo" resultMap="getUser" resultType="com.project.sbarchive.vo.user.UserVO">
        SELECT u.*, urs.role_set FROM `user` u left join user_role_set urs on u.userId = urs.userId WHERE u.userId = #{userId}
    </select>

    <select id="getUserId" parameterType="String" resultType="String">
        SELECT userId FROM `user` WHERE email = #{email}
    </select>

    <select id="userPasswdCheck" resultType="String">
        SELECT passwd FROM `user` WHERE userId = #{userId}
    </select>

    <select id="accountCheck" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM `user` WHERE userId = #{userId} AND email = #{email}
    </select>

    <update id="updatePassword">
        UPDATE user set passwd = #{passwd} WHERE userId = #{userId};
    </update>

    <update id="updateLogTemp">
        UPDATE user_pw_log set passwd = #{passwd}, modDate = now(), isTempPassword = 1 WHERE userId = #{userId}
    </update>

    <update id="updateLog">
        UPDATE user_pw_log set passwd = #{passwd}, modDate = now(), isTempPassword = 0 WHERE userId = #{userId}
    </update>

    <select id="isTempPassword" resultType="int">
        SELECT isTempPassword FROM user_pw_log WHERE userId = #{userId}
    </select>

    <update id="modifyNickname">
        UPDATE user set nickname = #{nickname} WHERE userId = #{userId} AND email = #{email}
    </update>

    <update id="modifyEmail">
        UPDATE user set email = #{email} WHERE userId = #{userId}
    </update>


    <sql id="search">
            <if test="types != null and types.length > 0">
                and
                <foreach collection="types" item="type" open="(" close=")" separator=" OR">
                    <if test="type == 's'.toString()">
                        `title` like concat('%',#{keyword},'%')
                    </if>
                    <if test="type == 'c'.toString()">
                        `content` like concat('%',#{keyword},'%')
                    </if>
                </foreach>
            </if>
    </sql>

<!--    내가 쓴 글 목록-->
    <select id="getMyBoardList" resultType="com.project.sbarchive.vo.board.BoardVO">
        select * from board where userId = #{userId} <include refid="search" />
        order by boardId desc limit #{skip}, #{size}
    </select>
    <select id="getMyBoardCount" resultType="int" >
        select count(*) from board where userId = #{userId} <include refid="search" />
    </select>


<!--    내가 쓴 아카이브 목록-->
    <select id="getMySignboardList" resultType="com.project.sbarchive.vo.signboard.SignBoardVO">
        select * from signboard where userId = #{userId} order by signboardId desc limit #{skip}, #{size}
    </select>
    <select id="getMySignboardCount" resultType="int" >
        select count(*) from signboard where userId = #{userId} <include refid="search" />
    </select>


<!--    내가 쓴 댓글 목록-->
    <select id="getMyReplyList" resultType="com.project.sbarchive.vo.reply.ReplyVO">
        select * from reply where userId = #{userId} order by replyId desc limit #{skip}, #{size}
    </select>
    <select id="getMyReplyCount" resultType="int" >
        select count(*) from reply where userId = #{userId} and isParentReplyDeleted = 0 <include refid="search" />
    </select>


<!-- 회원 탈퇴-->
    <update id="withdrawal">
        update `user` set del = 1  where userId = #{userId}
    </update>

    <!--  레벨 관련 쿼리 추가  -->
    <update id="lvPointUp">
        UPDATE user SET lvPoint = lvPoint + 10 WHERE `userId` = #{userId};
    </update>

    <update id="checkLevelUp">
        UPDATE USER
        <trim prefix="SET" suffixOverrides=",">
            <if test="level == 1 and lvPoint == 200">
                level = level + 1,
            </if>
            <if test="level == 2 and lvPoint == 500">
                level = level + 1,
            </if>
            userId = userId
        </trim>
        WHERE `userId` = #{userId}
    </update>
<!--    <if test='(level == 1 and lvPoint gt 200) or (level == 2 and lvPoint gt 500)'> level = level + 1 </if>-->
</mapper>
